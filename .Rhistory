sprintf("發生率統計日期: %s" , max(incidence_daily_adm3$date_diagnostic))
incidence_daily_adm3 %>%
filter(date_diagnostic == max(date_diagnostic)) %>%
arrange(-incidence_7day) %>%
select(incidence_7day , n_cases_7day , adm2 , adm3)
incidence_daily_adm3 %>%
filter(date_diagnostic == max(date_diagnostic)) %>%
arrange(-incidence_7day) %>%
select(incidence_7day , n_cases_7day , adm2 , adm3) %>%
mutate(across(c(incidence_7day, n_cases_7day) , round(1)))
incidence_daily_adm3 %>%
filter(date_diagnostic == max(date_diagnostic)) %>%
arrange(-incidence_7day) %>%
select(incidence_7day , n_cases_7day , adm2 , adm3) %>%
mutate(across(c(incidence_7day, n_cases_7day) , round , 1))
incidence_daily_adm3 %>%
filter(date_diagnostic == max(date_diagnostic)) %>%
arrange(-incidence_7day) %>%
select(incidence_7day , n_cases_7day , adm2 , adm3) %>%
mutate(incidence_7day = round(incidence_7day , 1)) %>%
rename(`七日發生率` = incidence_7day ,
`七日確診數` = n_cases_7day ,
`縣市` = adm2 , `鄉鎮市區` = adm3)
runApp()
incidence_daily_adm3 %>%
filter(date_diagnostic == max(date_diagnostic)) %>%
arrange(-incidence_7day) %>%
select(incidence_7day , n_cases_7day , adm2 , adm3) %>%
mutate(incidence_7day = round(incidence_7day , 1)) %>%
rename(`七日發生率` = incidence_7day ,
`七日確診數` = n_cases_7day ,
`縣市` = adm2 , `鄉鎮市區` = adm3)
?render_tableHTML
incidence_daily_adm3 %>%
filter(date_diagnostic == max(date_diagnostic)) %>%
arrange(-incidence_7day) %>%
select(incidence_7day , n_cases_7day , adm2 , adm3) %>%
mutate(incidence_7day = round(incidence_7day , 1)) %>%
rename(`七日發生率` = incidence_7day ,
`七日確診數` = n_cases_7day ,
`縣市` = adm2 , `鄉鎮市區` = adm3) %>%
tableHTML::tableHTML()
?tableHTML::tableHTML()
runApp()
runApp()
?tableOutput
runApp()
runApp()
p(strong("行政區依七日發生率"))
runApp()
runApp()
runApp()
incidence_oneday_adm2_sf %>%
leaflet(options = leafletOptions(minZoom = 6 , maxZoom = 11)) %>%
setView(120.972812 , 23.847964, 7) %>%
addProviderTiles("CartoDB.VoyagerNoLabels") %>%
addPolygons(
fillColor = ~pal_incidence(incidence_7day) ,
weight = 1 ,
opacity = 0.3 ,
color = "black" ,
fillOpacity = 0.7 ,
highlight = highlightOptions(
weight = 3,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE) ,
label = label_incidence ,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto")
) %>%
addLegend(pal = pal_incidence, values = ~incidence_7day,
opacity = 0.7,
title = "近七日發生率(每十萬人)",
position = "bottomright")
pal_incidence <- colorBin("YlOrRd",
domain = incidence_oneday_adm2_sf$incidence_7day ,
na.color = "white" ,
bins = c(1,5,10,25,50,75,Inf))
label_incidence <- sprintf("%s%s: \n近七日發生率=%s\n近七日新增確診=%s" ,
incidence_oneday_adm2_sf$COUNTYNAME ,
incidence_oneday_adm2_sf$TOWNNAME ,
round(incidence_oneday_adm2_sf$incidence_7day,1),
incidence_oneday_adm2_sf$n_cases_7day)
incidence_oneday_adm2_sf %>%
leaflet(options = leafletOptions(minZoom = 6 , maxZoom = 11)) %>%
setView(120.972812 , 23.847964, 7) %>%
addProviderTiles("CartoDB.VoyagerNoLabels") %>%
addPolygons(
fillColor = ~pal_incidence(incidence_7day) ,
weight = 1 ,
opacity = 0.3 ,
color = "black" ,
fillOpacity = 0.7 ,
highlight = highlightOptions(
weight = 3,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE) ,
label = label_incidence ,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto")
) %>%
addLegend(pal = pal_incidence, values = ~incidence_7day,
opacity = 0.7,
title = "近七日發生率(每十萬人)",
position = "bottomright")
pal_incidence <- colorBin("YlOrRd",
domain = incidence_oneday_adm2_sf$incidence_7day ,
na.color = "white" ,
bins = c(1,5,10,25,50,75,Inf))
label_incidence <- sprintf("%s%s: \n近七日發生率=%s\n近七日新增確診=%s" ,
incidence_oneday_adm2_sf$COUNTYNAME ,
incidence_oneday_adm2_sf$TOWNNAME ,
round(incidence_oneday_adm2_sf$incidence_7day,1),
incidence_oneday_adm2_sf$n_cases_7day)
label_incidence <- sprintf("%s\n近七日發生率=%s\n近七日新增確診=%s" ,
incidence_oneday_adm2_sf$COUNTYNAME ,
round(incidence_oneday_adm2_sf$incidence_7day,1),
incidence_oneday_adm2_sf$n_cases_7day)
incidence_oneday_adm2_sf
incidence_daily_adm2
# adm 2 incidence -------------------------------------------------
# the incidence of one particular day as sf
incidence_oneday_adm2_sf <- TWN_adm2 %>%
left_join(
incidence_daily_adm2 %>%
filter(date_diagnostic == selected_date) %>%
select(adm2 , incidence_7day),
by = c("COUNTYNAME" = "adm2")
) %>%
mutate(incidence_7day = ifelse(is.na(incidence_7day) , 0 , incidence_7day))
pal_incidence <- colorBin("YlOrRd",
domain = incidence_oneday_adm2_sf$incidence_7day ,
na.color = "white" ,
bins = c(1,5,10,25,50,75,Inf))
label_incidence <- sprintf("%s\n近七日發生率=%s\n近七日新增確診=%s" ,
incidence_oneday_adm2_sf$COUNTYNAME ,
round(incidence_oneday_adm2_sf$incidence_7day,1),
incidence_oneday_adm2_sf$n_cases_7day)
incidence_oneday_adm2_sf %>%
leaflet(options = leafletOptions(minZoom = 6 , maxZoom = 11)) %>%
setView(120.972812 , 23.847964, 7) %>%
addProviderTiles("CartoDB.VoyagerNoLabels") %>%
addPolygons(
fillColor = ~pal_incidence(incidence_7day) ,
weight = 1 ,
opacity = 0.3 ,
color = "black" ,
fillOpacity = 0.7 ,
highlight = highlightOptions(
weight = 3,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE) ,
label = label_incidence ,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto")
) %>%
addLegend(pal = pal_incidence, values = ~incidence_7day,
opacity = 0.7,
title = "近七日發生率(每十萬人)",
position = "bottomright")
# adm 2 incidence -------------------------------------------------
# the incidence of one particular day as sf
incidence_oneday_adm2_sf <- TWN_adm2 %>%
left_join(
incidence_daily_adm2 %>%
filter(date_diagnostic == selected_date) %>%
select(adm2 , incidence_7day),
by = c("COUNTYNAME" = "adm2")
) %>%
mutate(incidence_7day = ifelse(is.na(incidence_7day) , 0 , incidence_7day))
incidence_oneday_adm2_sf
# adm 2 incidence -------------------------------------------------
# the incidence of one particular day as sf
incidence_oneday_adm2_sf <- TWN_adm2 %>%
left_join(
incidence_daily_adm2 %>%
filter(date_diagnostic == selected_date) %>%
select(adm2 , incidence_7day , n_cases , population , n_cases_7day),
by = c("COUNTYNAME" = "adm2")
) %>%
mutate(incidence_7day = ifelse(is.na(incidence_7day) , 0 , incidence_7day))
pal_incidence <- colorBin("YlOrRd",
domain = incidence_oneday_adm2_sf$incidence_7day ,
na.color = "white" ,
bins = c(1,5,10,25,50,75,Inf))
label_incidence <- sprintf("%s\n近七日發生率=%s\n近七日新增確診=%s" ,
incidence_oneday_adm2_sf$COUNTYNAME ,
round(incidence_oneday_adm2_sf$incidence_7day,1),
incidence_oneday_adm2_sf$n_cases_7day)
incidence_oneday_adm2_sf %>%
leaflet(options = leafletOptions(minZoom = 6 , maxZoom = 11)) %>%
setView(120.972812 , 23.847964, 7) %>%
addProviderTiles("CartoDB.VoyagerNoLabels") %>%
addPolygons(
fillColor = ~pal_incidence(incidence_7day) ,
weight = 1 ,
opacity = 0.3 ,
color = "black" ,
fillOpacity = 0.7 ,
highlight = highlightOptions(
weight = 3,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE) ,
label = label_incidence ,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto")
) %>%
addLegend(pal = pal_incidence, values = ~incidence_7day,
opacity = 0.7,
title = "近七日發生率(每十萬人)",
position = "bottomright")
totalcases_adm3_sf
totalcases_adm2_sf
# adm 2 total case -------------------------------------------------
pal_totalcase <- colorBin("RdPu",
domain = totalcases_adm2_sf$n_cases_population ,
na.color = "white" ,
bins = c(1,10,25,50,75,100,150,Inf))
label_totalcase <- sprintf("%s: 每十萬人累計%s人確診 總確診人數=%s" ,
totalcases_adm2_sf$adm2 ,
round(totalcases_adm2_sf$n_cases_population,1),
totalcases_adm2_sf$n_cases)
totalcases_adm2_sf %>%
leaflet(options = leafletOptions(minZoom = 6 , maxZoom = 11)) %>%
setView(120.972812 , 23.847964, 7) %>%
addProviderTiles("CartoDB.VoyagerNoLabels") %>%
addPolygons(
fillColor = ~pal_totalcase(n_cases_population) ,
weight = 0.5 ,
opacity = 0.3 ,
color = "black" ,
fillOpacity = 0.7 ,
highlight = highlightOptions(
weight = 3,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE) ,
label = label_totalcase ,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto")
) %>%
addLegend(pal = pal_totalcase, values = ~n_cases_population,
opacity = 0.7,
title = "累計確診人數(每十萬人)",
position = "bottomright")
runApp()
runApp()
runApp()
st_point(c(121.0823 , 23.34226))
selected_point <- st_point(c(121.0823 , 23.34226)) %>%
st_set_crs(st_crs(TWN_adm2))
selected_point <- st_point(c(121.0823 , 23.34226))
st_crs(selected_point)
selected_point <- st_point(c(121.0823 , 23.34226)) %>%
st_set_crs(st_crs(TWN_adm2))
selected_point <- st_point(c(121.0823 , 23.34226) , dim = "XY") %>%
st_set_crs(st_crs(TWN_adm2))
selected_point
st_intersection(selected_point , TWN_adm2)
?st_point
st_crs(selected_point) <- st_crs(TWN_adm2)
st_point(c(121.0823 , 23.34226) , dim = "XY") %>%
st_as_sf()
class(selected_point)
selected_point <- st_as_sf(data.frame(x = 121.0823 , y = 23.34226))
selected_point <- st_as_sf(data.frame(x = 121.0823 , y = 23.34226) ,
coords = c("x","y"))
selected_point
selected_point <- st_as_sf(data.frame(x = 121.0823 , y = 23.34226) ,
coords = c("x","y")) %>%
st_set_crs(st_crs(TWN_adm2))
selected_point <- data.frame(x = 121.0823 , y = 23.34226) %>%
st_as_sf(coords = c("x","y")) %>%
st_set_crs(st_crs(TWN_adm2))
selected_point
st_intersection(selected_point , TWN_adm2)
st_contains(TWN_adm2 , selected_point)
TWN_adm2 %>%
filter(st_contains(selected_point))
TWN_adm2 %>%
filter(st_contains(. , selected_point))
st_contains(TWN_adm2 , selected_point) %>% class()
st_contains(TWN_adm2 , selected_point) %>% c()
st_contains(TWN_adm2 , selected_point) %>% unlist()
st_contains(TWN_adm2 , selected_point) %>% unlist(recursive = TRUE)
st_contains(TWN_adm2 , selected_point)
?st_contains
st_contains(TWN_adm2 , selected_point , sparse = FALSE)
TWN_adm2 %>%
filter(st_contains(. , selected_point , sparse = FALSE))
st_contains(. , selected_point , sparse = FALSE)
st_contains(selected_adm , selected_point , sparse = FALSE)
st_contains(TWN_adm2 , selected_point , sparse = FALSE)
st_contains(TWN_adm2 , selected_point , sparse = FALSE)
# check in which administration zone the selected point locates
contains_selected_point <- st_contains(TWN_adm2 , selected_point , sparse = FALSE)
any(contains_selected_point)
selected_adm <- TWN_adm2 %>%
filter(contains_selected_point)
selected_adm
COVID_df
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME"))
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME")) %>%
group_by(date_diagnostic) %>%
mutate(n_cases = sum(n_cases)) %>%
ungroup()
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME")) %>%
group_by(date_diagnostic) %>%
mutate(n_cases = sum(n_cases)) %>%
ungroup()
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME")) %>%
group_by(date_diagnostic)
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME")) %>%
group_by(date_diagnostic) %>%
mutate(n_cases = sum(n_cases))
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME")) %>%
group_by(date_diagnostic) %>%
mutate(n_cases = sum(n_cases)) %>%
ungroup()
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME")) %>%
select(-geometry) %>%
group_by(date_diagnostic) %>%
mutate(n_cases = sum(n_cases)) %>%
ungroup()
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME")) %>%
group_by(date_diagnostic) %>%
summarize(n_cases = sum(n_cases)) %>%
ungroup()
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME")) %>%
group_by(date_diagnostic) %>%
summarize(n_cases = sum(n_cases)) %>%
ungroup() %>%
ggplot(aes(x = date_diagnostic , y = n_cases)) +
geom_bar(stat = "identity")
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME")) %>%
group_by(date_diagnostic) %>%
summarize(n_cases = sum(n_cases)) %>%
ungroup() %>%
ggplot(aes(x = date_diagnostic , y = n_cases)) +
geom_bar(stat = "identity") +
labs(x = "個案研判日" , y = "確診病例數" ,
title = sprintf("%s每日新增確診數" , selected_adm$COUNTYNAME)) +
scale_x_date(date_labels = "%Y/%m/%d") +
ggthemes::theme_economist_white() +
theme(text = element_text(family = "Noto Sans CJK TC") ,
axis.text.x = element_text(angle = 45 , vjust = 1 , hjust = 1 , size = 7))
selected_point
# check in which administration zone the selected point locates
contains_selected_point <- st_contains(TWN_adm3 , selected_point , sparse = FALSE)
contains_selected_point
any(contains_selected_point)
selected_adm <- TWN_adm3 %>%
filter(contains_selected_point)
selected_adm
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME" , "adm3" = "TOWNNAME"))
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME" , "adm3" = "TOWNNAME")) %>%
group_by(date_diagnostic) %>%
summarize(n_cases = sum(n_cases)) %>%
ungroup()
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME" , "adm3" = "TOWNNAME")) %>%
group_by(date_diagnostic) %>%
summarize(n_cases = sum(n_cases)) %>%
ungroup() %>%
ggplot(aes(x = date_diagnostic , y = n_cases)) +
geom_bar(stat = "identity") +
labs(x = "個案研判日" , y = "確診病例數" ,
title = sprintf("%s每日新增確診數" , selected_adm$COUNTYNAME)) +
scale_x_date(date_labels = "%Y/%m/%d") +
ggthemes::theme_economist_white() +
theme(text = element_text(family = "Noto Sans CJK TC") ,
axis.text.x = element_text(angle = 45 , vjust = 1 , hjust = 1 , size = 7))
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME" , "adm3" = "TOWNNAME")) %>%
group_by(date_diagnostic) %>%
summarize(n_cases = sum(n_cases)) %>%
ungroup()
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME" , "adm3" = "TOWNNAME")) %>%
group_by(date_diagnostic) %>%
summarize(n_cases = sum(n_cases)) %>%
ungroup() %>% all(is.na())
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME" , "adm3" = "TOWNNAME")) %>%
group_by(date_diagnostic) %>%
summarize(n_cases = sum(n_cases)) %>%
ungroup() %>% is.na()
COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME" , "adm3" = "TOWNNAME")) %>%
group_by(date_diagnostic) %>%
summarize(n_cases = sum(n_cases)) %>%
ungroup() %>% is.na() %>% all()
selected_adm_daily <- COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME" , "adm3" = "TOWNNAME")) %>%
group_by(date_diagnostic) %>%
summarize(n_cases = sum(n_cases)) %>%
ungroup()
plot_selected_adm <- COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME" , "adm3" = "TOWNNAME")) %>%
group_by(date_diagnostic) %>%
summarize(n_cases = sum(n_cases)) %>%
ungroup() %>%
ggplot(aes(x = date_diagnostic , y = n_cases)) +
geom_bar(stat = "identity") +
labs(x = "個案研判日" , y = "確診病例數" ,
title = sprintf("%s每日新增確診數" , selected_adm$COUNTYNAME)) +
scale_x_date(date_labels = "%Y/%m/%d") +
ggthemes::theme_economist_white() +
theme(text = element_text(family = "Noto Sans CJK TC") ,
axis.text.x = element_text(angle = 45 , vjust = 1 , hjust = 1 , size = 7))
plot_selected_adm
plot_selected_adm <- COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME" , "adm3" = "TOWNNAME")) %>%
group_by(date_diagnostic) %>%
summarize(n_cases = sum(n_cases)) %>%
ungroup() %>%
ggplot(aes(x = date_diagnostic , y = n_cases)) +
geom_bar(stat = "identity") +
labs(x = "個案研判日" , y = "確診病例數" ,
title = sprintf("%s%s每日新增確診數" , selected_adm$COUNTYNAME , selected_adm$TOWNNAME)) +
scale_x_date(date_labels = "%Y/%m/%d") +
ggthemes::theme_economist_white() +
theme(text = element_text(family = "Noto Sans CJK TC") ,
axis.text.x = element_text(angle = 45 , vjust = 1 , hjust = 1 , size = 7))
plot_selected_adm
rm(plot_selected_adm)
selected_adm_daily <- COVID_df %>%
right_join(selected_adm , by = c("adm2"="COUNTYNAME" , "adm3" = "TOWNNAME")) %>%
group_by(date_diagnostic) %>%
summarize(n_cases = sum(n_cases)) %>%
ungroup()
plot_selected_adm_daily <- selected_adm_daily %>%
ggplot(aes(x = date_diagnostic , y = n_cases)) +
geom_bar(stat = "identity") +
labs(x = "個案研判日" , y = "確診病例數" ,
title = sprintf("%s%s每日新增確診數" , selected_adm$COUNTYNAME , selected_adm$TOWNNAME)) +
scale_x_date(date_labels = "%Y/%m/%d") +
ggthemes::theme_economist_white() +
theme(text = element_text(family = "Noto Sans CJK TC") ,
axis.text.x = element_text(angle = 45 , vjust = 1 , hjust = 1 , size = 7))
selected_adm_daily
plot_selected_adm_daily
all(is.na(selected_adm_daily))
if(all(is.na(selected_adm_daily))) plot_selected_adm_daily + labs(subtitle = "無確診")
if(all(is.na(selected_adm_daily))) plot_selected_adm_daily + labs(title = sprintf("%s%s無確診" , selected_adm$COUNTYNAME , selected_adm$TOWNNAME))
runApp()
runApp()
runApp()
runApp()
as.Date("2019-01-01")
runApp()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.13")
BiocManager::install(version = '3.10')
remove.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
library(lubridate) ; library(stringr)
# =====================================
# import data
# =====================================
# Covid dataset from CDC
COVID_df <- read.csv("https://data.cdc.gov.tw/download?resourceid=3c1e263d-16ec-4d70-b56c-21c9e2171fc7&dataurl=https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.csv" ,
stringsAsFactors = FALSE) %>%
setNames(c("disease" , "date_diagnostic" , "adm2" , "adm3" , "gender" , "imported" , "age" , "n_cases")) %>%
select(-disease) %>%
# cleaan table
mutate(date_diagnostic = lubridate::as_date(as.character(date_diagnostic))) %>%
mutate(adm2 = ifelse(adm2 == "空值" , NA , adm2) ,
adm3 = ifelse(adm3 == "空值" , NA , adm3) ,
imported = ifelse(imported == "是" , TRUE , FALSE)) %>%
mutate(adm2 = str_replace_all(adm2 , "台" , "臺") ) %>%
# complete time-series (days without confirmed cases)
right_join(
data.frame(date_diagnostic = seq(min(.$date_diagnostic) ,
max(.$date_diagnostic) ,
"1 day"))
) %>%
arrange(date_diagnostic) %>%
mutate(n_cases = ifelse(is.na(n_cases) , 0 , n_cases))
rsconnect::appDependencies()
rsconnect::deployApp()
runApp()
?as_date
?as_date
